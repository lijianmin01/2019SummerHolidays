package javaworkspace;

public class javaKindsAndObject {
	private  int a;
	public void setA(int a)
	{
		this.a=a;
	}
	public int add(int b)
	{
		return this.a+b;
	}
	public static void main(String[] args){
		//OO
		int b=5;
		javaworkspace obj= new javaworkspace();
		obj.setA(10);
		System.out.println(obj.add(b));
		
		//面向对象的思想
		/*
		 * （1）
		 * 	现实对象是由对象和对象之间相互作用共同组成
		 * 	每个对象有自己的特性，也有自己的专有的方法。外部对象想要调用这些方法，可以向它请求并传入参数，
		 * 等方法执行结束后，返回结果。
		 * 	对象=属性+方法
		 * 	对象的规范=属性定义+方法定义
		 * 
		 * （2）JAVA 中，引入对象和类的概念
		 * -对象时一个变量（具体的东西）
		 * -类就是类型（是规范，是定义），从万千对象中抽取共性；
		 * -类规定了对象应该有的属性内容和方法
		 * -对象是类的而具体实现，是活生生的
		 * -例如：土豆丝菜谱是类，一盘土豆丝是对象
		 * 
		 * （3）
		 * -从程序发展的角度来理解，OO（Oriented Object）是对OP（Oriented Procedure）的一种改进
		 * -OP的典型代表是C和Pascal.更强调方法动作，所有的额变量是被动参与进来的，没有自主决定权
		 * -OO的方法属于每个对象的。能否实现是由每个对象说了算的额，有主任翁精神
		 * 
		 * （5）
		 * 变量定义的变迁：更加功能强大
		 * 基本类型（一种变量）=》结构体（多种变量捆绑）=》类（多种变量
		 * +方法）
		 * 类可以继承；子类可以继承父类所有内容（不能直接访问private成员）
		 * 		-基本类型无法做到
		 * 		-结构体只能做到全包括，不能控制包含粒度
		 * 
		 * （8）
		 * OO最早的始于Simula67,成形于20世纪70年代Smalltalk
		 * 当前最早主要的代表是C++和JAVA
		 * 面向对象语言主要特点
		 * 		-识认性  、类别性 、多态性 、 继承性
		 * 
		 * */
		
		/*类和对象
		 * （1）
		 * 最简单的类class A{}//没有任何属性和行为
		 * 对象A obj=new A{};//int a= new int(5);
		 * 类是定义，是规范，是“死”的东西
		 * 对象时实例，是类的一个实现，是一个具体的东西
		 * 打个比方
		 * 		类《==》一个土豆丝菜谱
		 * 		对象是根据类制作出对象《==》一盘土豆丝
		 * 
		 * 
		 * （2）
		 * A obj1=new A(); A obj2=new A();
		 * 以上有两个对象，他们类型都是A，但是这两个不同的对象，
		 * 在内存中有不同的额存放地址。因此，没有两个对象是完全一样的
		 * 
		 * （3）
		 * A obj=new A();
		 * obj可以看作是内存中一个对象（包括若干个数据）的句柄
		 * 在C/C++中，obj称为指针，在JAVA中称为Reference(参考）
		 * 对象赋值是Reference赋值，r而基本类型是直接值拷贝 
		 * 
		 * 基本类型的变量值小，可直接拷贝；对象包含多个值，不容易复制
		 * ，赋值采用共享同一块内存区域
		 * 
		 * 产生一个对象，A obj=new A();
		 * 		-99%的情况是用new关键字，还有1%是用克隆和反射生成
		 * new出对象后，内部属性默认值是？
		 * 	-short 0 int 0 long 0L
		 * 	-char '\u0000'(空格)
		 * 	-byte 0
		 * 	-float 0.0f
		 * 	-double 0.0d
		 * 
		 * 函数内的局部变量，编译器不会给默认值，需要初始化才可以使用
		 * 	类的成员变量，编译器会给默认值，可以直接使用
		 * */
		//基本类型和普通赋值上不同
		
		/*总结
		 * -类是规范，对象是根据规范产生出的实例
		 * -基本型别赋值是拷贝赋值，对象赋值是Reference赋值
		 * -类成员变量是有初值，函数临时变量必须有初始化
		 * */
		
	}
}


















