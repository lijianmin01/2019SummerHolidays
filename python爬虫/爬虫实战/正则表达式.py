'''
    正则表达式
    regular expression regex RE
        -通用的字符串表达框架
        -简洁表达一组字符串的表达式
        -针对字符串表达“简洁”和“特征”思想的工具
        -判断某字符串的特征归属

        表达文本类型的特征（病毒、入侵等）
        同时查找或替换一组字符串
        匹配字符串的部分或全部

        编译：将符合正则表达式语法的字符串转换成正则表达式

    语法：
        .       表示任何字符
        []      字符集，对单个字符给出取值范围     [abc]表示a,b,c, [a-z]表示a到z单个字符
        [^]     非字符集，对单个字符给出排除范围   [^abc]表示非a或b或c的单个字符
        *       前一个字符0次或无限次扩展       abc*表示ab、abc、abcc、abccc等
        +       前一个字符1次或无限次扩展       abc+表示abc、abcc、abccc等
        ?       前一个字符0次或一次扩展        abc?表示ab、abc
        |       左右表达式任意一个               abc|def表示abc、def
     常用操作符
        {m}     扩展前一个字符m次               ab{2}c 表示abbc
        {m,n}   扩展前一个字符m到n次（含n）     ab{1,2}c表示abc、abbc
        ^       匹配字符串开头               ^abc表示abc且在一个字符串的开头
        ()      分组标记，内部只能使用|操作符 （abc）表示abc,(abc|def)表示abc、def
        \d      数字，等价于[0-9]
        \w      单词字符，等价于[A-Za-z0-9]

        [\u4e00-\u9fa5]     匹配中文字符
     精确写法
        0-99：[1-9]?\d
        100-199:1\d{2}
        200-249:2[0-4]\d
        250-255:25[0-5]

    Re库
        raw string类型（原生字符串类型）
        re库采用raw string类型表示正则表达式，表示为：r'text'

    re.search()     在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象
    re.match()      从一个字符串的开始位置匹配正则表达式，返回match对象
    re.findall()    搜索字符串，以列表类型返回全部能匹配的子串
    re.split()      将一个字符串按照正则表达式匹配结果进行分隔，返回列表类型
    re.finditer()   搜索字符串，返回一个匹配结果的第代类型，每个第代元素是match对象
    re.sub()        在一个字符串中替换匹配正则表达式的子串，返回替换后的字符串

    re.search(pattern,string,flags=0)
        在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象
        pattern:正则表达式的字符串或原生字符串表示
        string:待匹配字符串
        flags:正则表达式使用时的控制标记
            flags:正则表达式使用时的控制标记
            re.I  忽略正则表达式的大小写，[A-Z]能够匹配小写字符
            re.M  正则表达式中^操作符能够将给定字符串的每行当做匹配开始
            re.S  正则表达式中的，操作符能够匹配所有字符，默认匹配串换行外的所有字符


Match对象的方法
    .group(0)   获得匹配后的字符串
    .start()    匹配字符串在原始字符串的开始位置
    .end()      匹配字符串在原始字符串的结束位置
    .span()     返回（.start(),end()）


Re库的贪婪匹配和最小匹配
    Re库默认采用贪婪匹配，即输出匹配最长的子串

    最小匹配操作符
    *？      前一个字符0次或无限扩展，最小匹配
    +？      前一个字符一次或无限次扩展，最小匹配
    ??      前一个字符0次或1次扩展，最小匹配
    {m,n}?      扩展前一个字符m至n次（含n），最小匹配

'''

